{"version":3,"file":"static/js/203.a91ee30c.chunk.js","mappings":"sPA6FA,SAASA,EAAT,GAAwD,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACnCC,EAAS,CAAC,EAuBhB,OArBKH,EAGF,0HAA8DI,KAAKJ,KAEpEG,EAAOH,KAAO,gBAJdG,EAAOH,KAAO,YAOXC,EAEO,2CAA2CG,KAAKH,KAC1DE,EAAOH,KAAO,0BAFdG,EAAOF,MAAQ,aAKZC,EAEO,uCAAuCE,KAAKF,KACtDC,EAAOD,SACL,sGAHFC,EAAOD,SAAW,gBAMbC,CACR,CAED,UAzGmB,WACjB,IAAME,GAAaC,EAAAA,EAAAA,QAAO,MACpBC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAUF,EAAAA,EAAAA,IAAYG,EAAAA,KAE5BC,EAAAA,EAAAA,YAAU,WACQ,YAAX,OAALL,QAAK,IAALA,OAAA,EAAAA,EAAOM,OAAqBC,EAAAA,OAAAA,QAAA,UAAkBP,EAAMQ,SACrD,GAAE,CAACR,IAEJ,IAAMS,EAAgB,CACpBlB,KAAM,GACNC,MAAO,GACPC,SAAU,IAGNiB,GAASC,EAAAA,EAAAA,IAAU,CACvBF,cAAAA,EACAG,SAAUtB,EACVuB,oBAAoB,EACpBC,SAAU,cAA+C,IAA5CvB,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAcsB,EAAgB,EAAhBA,UACtCjB,GAASkB,EAAAA,EAAAA,IAAO,CAAEzB,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,KAE5BiB,EAAOhB,OAAOH,MACdmB,EAAOhB,OAAOF,OACdkB,EAAOhB,OAAOD,UAEfsB,EAAU,CAAEN,cAAAA,GACf,IAGKQ,EAAgDP,EAAhDO,aAAcC,EAAkCR,EAAlCQ,aAAcC,EAAoBT,EAApBS,QAASzB,EAAWgB,EAAXhB,OAE7C,OACE,+BACE,UAAC,IAAD,CAAY0B,IAAKxB,EAAYkB,SAAUG,EAAvC,WACE,SAAC,IAAD,CACEI,MAAM,OACNC,QAAQ,SACRC,KAAK,QACLjB,KAAK,OACLf,KAAK,OACLiC,SAAUN,EACVlB,MAAOmB,EAAQ5B,MAAQkC,QAAQ/B,EAAOH,MACtCmC,WAAYP,EAAQ5B,MAAQG,EAAOH,KACnCoC,UAAQ,KAEV,SAAC,IAAD,CACEN,MAAM,QACNC,QAAQ,SACRC,KAAK,QACLjB,KAAK,QACLf,KAAK,QACLiC,SAAUN,EACVlB,MAAOmB,EAAQ3B,OAASiC,QAAQ/B,EAAOF,OACvCkC,WAAYP,EAAQ3B,OAASE,EAAOF,MACpCmC,UAAQ,KAEV,SAAC,IAAD,CACEC,GAAG,eACHP,MAAM,WACNC,QAAQ,SACRC,KAAK,QACLjB,KAAK,WACLf,KAAK,WACLiC,SAAUN,EACVlB,MAAOmB,EAAQ1B,UAAYgC,QAAQ/B,EAAOD,UAC1CiC,WAAYP,EAAQ1B,UAAYC,EAAOD,SACvCkC,UAAQ,KAEV,SAAC,IAAD,CAAWrB,KAAK,SAAhB,UACE,0BAAmB,WAAZH,EAAuB,aAAe,kBAKtD,C,sECzFY0B,E,QAAaC,GAAAA,KAAH,6M,0FCCVC,GAAkBD,EAAAA,EAAAA,IAAOE,EAAAA,EAAPF,CAAH,uX","sources":["components/SignupForm/SignupForm.jsx","shared/components/StyledForm/StyledForm.styled.jsx","shared/components/StyledTextField/StyledTextField.styled.jsx"],"sourcesContent":["// react\nimport { useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// libraries\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useFormik } from 'formik';\n// redux-components\nimport { signUp } from 'redux/auth/authOperations';\nimport { selectAuthError, selectIsLoading } from 'redux/auth/authSelectors';\n// shared-components\nimport { StyledForm } from 'shared/components/StyledForm/StyledForm.styled';\nimport { CustomBtn } from 'shared/components/Button/CustomBtn.styled';\nimport { StyledTextField } from 'shared/components/StyledTextField/StyledTextField.styled';\n\n//\nconst SignupForm = () => {\n  const signUpForm = useRef(null);\n  const dispatch = useDispatch();\n  const error = useSelector(selectAuthError);\n  const loading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    error?.type === 'signUp' && Notify.failure(`${error.message}`);\n  }, [error]);\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validate: validateUserValues,\n    enableReinitialize: true,\n    onSubmit: ({ name, email, password }, { resetForm }) => {\n      dispatch(signUp({ name, email, password }));\n      if (\n        !formik.errors.name &&\n        !formik.errors.email &&\n        !formik.errors.password\n      )\n        resetForm({ initialValues });\n    },\n  });\n\n  const { handleSubmit, handleChange, touched, errors } = formik;\n\n  return (\n    <>\n      <StyledForm ref={signUpForm} onSubmit={handleSubmit}>\n        <StyledTextField\n          label=\"Name\"\n          variant=\"filled\"\n          size=\"small\"\n          type=\"text\"\n          name=\"name\"\n          onChange={handleChange}\n          error={touched.name && Boolean(errors.name)}\n          helperText={touched.name && errors.name}\n          required\n        />\n        <StyledTextField\n          label=\"Email\"\n          variant=\"filled\"\n          size=\"small\"\n          type=\"email\"\n          name=\"email\"\n          onChange={handleChange}\n          error={touched.email && Boolean(errors.email)}\n          helperText={touched.email && errors.email}\n          required\n        />\n        <StyledTextField\n          id=\"filled-basic\"\n          label=\"Password\"\n          variant=\"filled\"\n          size=\"small\"\n          type=\"password\"\n          name=\"password\"\n          onChange={handleChange}\n          error={touched.password && Boolean(errors.password)}\n          helperText={touched.password && errors.password}\n          required\n        />\n        <CustomBtn type=\"submit\">\n          <span>{loading === 'signUp' ? 'Loading...' : 'Sign up'}</span>\n        </CustomBtn>\n      </StyledForm>\n    </>\n  );\n};\n\nfunction validateUserValues({ name, email, password }) {\n  const errors = {};\n\n  if (!name) {\n    errors.name = 'Type name';\n  } else if (\n    !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(name)\n  ) {\n    errors.name = 'Invalid name';\n  }\n\n  if (!email) {\n    errors.email = 'Type email';\n  } else if (!/[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/i.test(email)) {\n    errors.name = 'Invalid email address ';\n  }\n\n  if (!password) {\n    errors.password = 'Type password';\n  } else if (!/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/i.test(password)) {\n    errors.password =\n      'Must contain at least one number and one uppercase and lowercase letter, and at least 8 characters';\n  }\n\n  return errors;\n}\n\nexport default SignupForm;\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  width: 250px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  button {\n    align-self: flex-start;\n  }\n\n  input {\n    margin-top: 6px;\n    width: 100%;\n  }\n`;\n","import { styled } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\n\nexport const StyledTextField = styled(TextField)`\n  & label.Mui-focused {\n    color: white;\n  }\n\n  & label.Mui-focused.Mui-error {\n    color: #d32f2f;\n  }\n\n  & .MuiFilledInput-root:after {\n    border-bottom-color: white;\n  }\n\n  input:-webkit-autofill {\n    -webkit-box-shadow: inset 0 0 0 50px #8e8890;\n    box-shadow: inset 0 0 0 50px #8e8890;\n    -webkit-text-fill-color: black;\n  }\n`;\n"],"names":["validateUserValues","name","email","password","errors","test","signUpForm","useRef","dispatch","useDispatch","error","useSelector","selectAuthError","loading","selectIsLoading","useEffect","type","Notify","message","initialValues","formik","useFormik","validate","enableReinitialize","onSubmit","resetForm","signUp","handleSubmit","handleChange","touched","ref","label","variant","size","onChange","Boolean","helperText","required","id","StyledForm","styled","StyledTextField","TextField"],"sourceRoot":""}