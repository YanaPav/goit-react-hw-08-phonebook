{"version":3,"file":"static/js/335.eaa10298.chunk.js","mappings":"+SAeaA,EAAY,WACvB,IAAMC,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAUF,EAAAA,EAAAA,IAAYG,EAAAA,IAC5B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WACQ,WAAX,OAALV,QAAK,IAALA,OAAA,EAAAA,EAAOW,OAAoBC,EAAAA,OAAAA,QAAA,UAAkBZ,EAAMa,QAAQA,SAC5D,GAAE,CAACb,IAEJ,IAAMc,EAAgB,CACpBR,MAAAA,EACAE,SAAAA,GAGIO,GAASC,EAAAA,EAAAA,IAAU,CACvBF,cAAAA,EACAG,SAAUC,EACVC,oBAAoB,EACpBC,SAAU,cAAyC,IAAtCd,EAAqC,EAArCA,MAAOE,EAA8B,EAA9BA,SAAca,EAAgB,EAAhBA,UAChCd,EAASD,GACTG,EAAYD,GACZV,GAASwB,EAAAA,EAAAA,IAAM,CAAEhB,MAAAA,EAAOE,SAAAA,KACnBO,EAAOQ,OAAOjB,OAAUS,EAAOQ,OAAOf,UACzCa,EAAU,CAAEP,cAAAA,GACf,IAGKU,EAAgDT,EAAhDS,aAAcC,EAAkCV,EAAlCU,aAAcC,EAAoBX,EAApBW,QAASH,EAAWR,EAAXQ,OAE7C,OACE,+BACE,UAAC,IAAD,CAAYI,IAAK/B,EAAWwB,SAAUI,EAAtC,WACE,SAAC,IAAD,CACEI,MAAM,QACNC,QAAQ,SACRC,KAAK,QACLnB,KAAK,QACLoB,KAAK,QACLC,SAAUP,EACVzB,MAAO0B,EAAQpB,OAAS2B,QAAQV,EAAOjB,OACvC4B,WAAYR,EAAQpB,OAASiB,EAAOjB,MACpC6B,UAAQ,KAGV,SAAC,IAAD,CACEP,MAAM,WACNC,QAAQ,SACRC,KAAK,QACLnB,KAAK,WACLoB,KAAK,WACLC,SAAUP,EACVzB,MAAO0B,EAAQlB,UAAYyB,QAAQV,EAAOf,UAC1C0B,WAAYR,EAAQlB,UAAYe,EAAOf,SACvC2B,UAAQ,KAEV,SAAC,IAAD,CAAWxB,KAAK,SAAhB,UACE,0BAAmB,UAAZR,EAAsB,aAAe,iBAKrD,EAED,SAASe,EAAT,GAAkD,IAApBZ,EAAmB,EAAnBA,MAAOE,EAAY,EAAZA,SAC7Be,EAAS,CAAC,EAehB,OAbKjB,EAEO,2CAA2C8B,KAAK9B,KAC1DiB,EAAOQ,KAAO,0BAFdR,EAAOjB,MAAQ,aAKZE,EAEO,uCAAuC4B,KAAK5B,KACtDe,EAAOf,SACL,sGAHFe,EAAOf,SAAW,gBAMbe,CACR,C,eChGYc,E,QAAgBC,GAAAA,IAAH,gFCgB1B,EAXkB,WAChB,OACE,iCACE,SAAC3C,EAAD,KACA,UAAC0C,EAAD,sCACyB,SAAC,KAAD,CAAME,GAAG,UAAT,0BAI9B,C,sECdYC,E,QAAaF,GAAAA,KAAH,6M,0FCCVG,GAAkBH,EAAAA,EAAAA,IAAOI,EAAAA,EAAPJ,CAAH,uX","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx","shared/components/StyledForm/StyledForm.styled.jsx","shared/components/StyledTextField/StyledTextField.styled.jsx"],"sourcesContent":["// react\nimport { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// libraries\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useFormik } from 'formik';\n// redux-components\nimport { login } from 'redux/auth/authOperations';\nimport { selectAuthError, selectIsLoading } from 'redux/auth/authSelectors';\n// shared-components\nimport { StyledForm } from 'shared/components/StyledForm/StyledForm.styled';\nimport { CustomBtn } from 'shared/components/Button/CustomBtn.styled';\nimport { StyledTextField } from 'shared/components/StyledTextField/StyledTextField.styled';\n\n//\nexport const LoginForm = () => {\n  const loginForm = useRef(null);\n  const dispatch = useDispatch();\n  const error = useSelector(selectAuthError);\n  const loading = useSelector(selectIsLoading);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  useEffect(() => {\n    error?.type === 'login' && Notify.failure(`${error.message.message}`);\n  }, [error]);\n\n  const initialValues = {\n    email,\n    password,\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validate: validateUserValues,\n    enableReinitialize: true,\n    onSubmit: ({ email, password }, { resetForm }) => {\n      setEmail(email);\n      setPassword(password);\n      dispatch(login({ email, password }));\n      if (!formik.errors.email && !formik.errors.password)\n        resetForm({ initialValues });\n    },\n  });\n\n  const { handleSubmit, handleChange, touched, errors } = formik;\n\n  return (\n    <>\n      <StyledForm ref={loginForm} onSubmit={handleSubmit}>\n        <StyledTextField\n          label=\"Email\"\n          variant=\"filled\"\n          size=\"small\"\n          type=\"email\"\n          name=\"email\"\n          onChange={handleChange}\n          error={touched.email && Boolean(errors.email)}\n          helperText={touched.email && errors.email}\n          required\n        />\n\n        <StyledTextField\n          label=\"Password\"\n          variant=\"filled\"\n          size=\"small\"\n          type=\"password\"\n          name=\"password\"\n          onChange={handleChange}\n          error={touched.password && Boolean(errors.password)}\n          helperText={touched.password && errors.password}\n          required\n        />\n        <CustomBtn type=\"submit\">\n          <span>{loading === 'login' ? 'Loading...' : 'Log in'}</span>\n        </CustomBtn>\n      </StyledForm>\n    </>\n  );\n};\n\nfunction validateUserValues({ email, password }) {\n  const errors = {};\n\n  if (!email) {\n    errors.email = 'Type email';\n  } else if (!/[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/i.test(email)) {\n    errors.name = 'Invalid email address ';\n  }\n\n  if (!password) {\n    errors.password = 'Type password';\n  } else if (!/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/i.test(password)) {\n    errors.password =\n      'Must contain at least one number and one uppercase and lowercase letter, and at least 8 characters';\n  }\n\n  return errors;\n}\n","import styled from 'styled-components';\n\nexport const LoginPageText = styled.div`\n  margin-top: 10px;\n\n  a {\n    color: #fc037b;\n  }\n`;\n","// react\nimport { Link } from 'react-router-dom';\n// components\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport { LoginPageText } from './LoginPage.styled';\n\n//\nconst LoginPage = () => {\n  return (\n    <>\n      <LoginForm />\n      <LoginPageText>\n        Don't have an account? <Link to=\"/signup\">Sign up</Link>\n      </LoginPageText>\n    </>\n  );\n};\n\nexport default LoginPage;\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  width: 250px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  button {\n    align-self: flex-start;\n  }\n\n  input {\n    margin-top: 6px;\n    width: 100%;\n  }\n`;\n","import { styled } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\n\nexport const StyledTextField = styled(TextField)`\n  & label.Mui-focused {\n    color: white;\n  }\n\n  & label.Mui-focused.Mui-error {\n    color: #d32f2f;\n  }\n\n  & .MuiFilledInput-root:after {\n    border-bottom-color: white;\n  }\n\n  input:-webkit-autofill {\n    -webkit-box-shadow: inset 0 0 0 50px #8e8890;\n    box-shadow: inset 0 0 0 50px #8e8890;\n    -webkit-text-fill-color: black;\n  }\n`;\n"],"names":["LoginForm","loginForm","useRef","dispatch","useDispatch","error","useSelector","selectAuthError","loading","selectIsLoading","useState","email","setEmail","password","setPassword","useEffect","type","Notify","message","initialValues","formik","useFormik","validate","validateUserValues","enableReinitialize","onSubmit","resetForm","login","errors","handleSubmit","handleChange","touched","ref","label","variant","size","name","onChange","Boolean","helperText","required","test","LoginPageText","styled","to","StyledForm","StyledTextField","TextField"],"sourceRoot":""}